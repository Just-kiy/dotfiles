return {
    -- "yetone/avante.nvim",
    -- event        = "VeryLazy",
    -- version      = false, -- Never set this to "*"!
    -- ---@module 'avante'
    -- ---@type avante.Config
    -- opts         = (function()
    --     -- ─── 1) Define your AITunnel “presets” (only the variable bits) ─────────
    --     local aitunnel_presets = {
    --         {
    --             short = "codex-mini",
    --             model = "codex-mini",
    --             display_name = "AITunnel · codex‑mini",
    --         },
    --         {
    --             short = "o3",
    --             model = "o3",
    --             display_name = "AITunnel · o3",
    --         },
    --         {
    --             short = "gemini-2.5-pro",
    --             model = "google/gemini-2.5-pro-exp-03-25:free",
    --             display_name = "AITunnel · gemini‑2.5‑pro",
    --         },
    --     }
    --
    --     -- ─── 2) Define the shared AITunnel settings ─────────────────────────────
    --     local aitunnel_common = {
    --         __inherited_from = "openai",
    --         endpoint         = "https://api.aitunnel.ru/v1",
    --         api_key_name     = "AITUNNEL_API_KEY",
    --     }
    --
    --     -- ─── 3) Build out the providers table ──────────────────────────────────
    --     local providers = {
    --         -- your existing OpenRouter provider (example)
    --         openrouter = {
    --             __inherited_from = "openai",
    --             endpoint         = "https://openrouter.ai/api/v1",
    --             api_key_name     = "OPENROUTER_API_KEY",
    --             model            = "google/gemini-2.5-pro-exp-03-25",
    --         },
    --         openrouter_deepseek       = {
    --             __inherited_from = 'openai',
    --             endpoint = 'https://openrouter.ai/api/v1',
    --             api_key_name = 'OPENROUTER_API_KEY',
    --             model = 'deepseek/deepseek-r1-0528:free',
    --         },
    --         openrouter_mistral = {
    --             __inherited_from = 'openai',
    --             endpoint = 'https://openrouter.ai/api/v1',
    --             api_key_name = 'OPENROUTER_API_KEY',
    --             model = 'mistralai/mistral-small-3.2-24b-instruct:free',
    --         },
    --     }
    --
    --     -- merge in each AITunnel preset under a unique key “aitunnel/<short>”
    --     for _, preset in ipairs(aitunnel_presets) do
    --         local key = "aitunnel/" .. preset.short
    --         providers[key] = vim.tbl_extend("force",
    --             aitunnel_common,
    --             {
    --                 model = preset.model,
    --                 display_name = preset.display_name,
    --             }
    --         )
    --     end
    --
    --     -- ─── 4) Return the final opts ─────────────────────────────────────────
    --     return {
    --         provider                 = "aitunnel/codex-mini", -- default choice
    --         cursor_applying_provider = "aitunnel/codex-mini",
    --         behaviour                = {
    --             enable_cursor_planning_mode = true,
    --         },
    --         providers                = providers,
    --     }
    -- end)(),
    -- -- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
    -- build        = "make",
    -- -- build = "powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false" -- for windows
    -- dependencies = {
    --     "nvim-treesitter/nvim-treesitter",
    --     "nvim-lua/plenary.nvim",
    --     "MunifTanjim/nui.nvim",
    --     --- The below dependencies are optional,
    --     "echasnovski/mini.pick",         -- for file_selector provider mini.pick
    --     "nvim-telescope/telescope.nvim", -- for file_selector provider telescope
    --     "hrsh7th/nvim-cmp",              -- autocompletion for avante commands and mentions
    --     "ibhagwan/fzf-lua",              -- for file_selector provider fzf
    --     "stevearc/dressing.nvim",        -- for input provider dressing
    --     "folke/snacks.nvim",             -- for input provider snacks
    --     "nvim-tree/nvim-web-devicons",   -- or echasnovski/mini.icons
    --     "zbirenbaum/copilot.lua",        -- for providers='copilot'
    --     {
    --         -- support for image pasting
    --         "HakonHarnes/img-clip.nvim",
    --         event = "VeryLazy",
    --         opts = {
    --             -- recommended settings
    --             default = {
    --                 embed_image_as_base64 = false,
    --                 prompt_for_file_name = false,
    --                 drag_and_drop = {
    --                     insert_mode = true,
    --                 },
    --                 -- required for Windows users
    --                 use_absolute_path = true,
    --             },
    --         },
    --     },
    --     {
    --         -- Make sure to set this up properly if you have lazy=true
    --         'MeanderingProgrammer/render-markdown.nvim',
    --         opts = {
    --             file_types = { "markdown", "Avante" },
    --         },
    --         ft = { "markdown", "Avante" },
    --     },
    -- },
}
